{"version":3,"file":"static/js/register-page.ac1290da.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/register-page/styles.module.css?8882","pages/register-page/register-page.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"styles_wrapper__ndyUs\",\"fadeIn\":\"styles_fadeIn__1GfeY\",\"section\":\"styles_section__+qYIn\",\"form\":\"styles_form__ixE8U\",\"inputWrapper\":\"styles_inputWrapper__OC7rt\",\"submitButton\":\"styles_submitButton__gWVyR\",\"instructions\":\"styles_instructions__hh6C4\",\"offscreen\":\"styles_offscreen__vQ44z\",\"hide\":\"styles_hide__Ydv9c\",\"valid\":\"styles_valid__66Lon\",\"invalid\":\"styles_invalid__YmorP\",\"errmsg\":\"styles_errmsg__LwFf1\",\"line\":\"styles_line__R3Pkt\",\"showPasswordButton\":\"styles_showPasswordButton__rs3Ud\",\"infoIcon\":\"styles_infoIcon__qQfM- styles_showPasswordButton__rs3Ud\"};","import { useRef, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport authOperations from 'Redux/auth/auth-operations';\nimport styles from './styles.module.css';\nimport { NavLink } from 'react-router-dom';\nimport {\n  FaCheck,\n  FaTimes,\n  FaInfoCircle,\n  FaRegEye,\n  FaRegUser,\n} from 'react-icons/fa';\nimport { MdOutlineAlternateEmail } from 'react-icons/md';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nconst USER_REGEX = /^[A-z][A-z0-9-_-\\s?]{3,23}$/;\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\nconst EMAIL_REGEX = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n\nconst Register = () => {\n  const userRef = useRef();\n  const errRef = useRef();\n  const dispatch = useDispatch();\n  const [passwordShown1, setPasswordShown1] = useState(false);\n  const [passwordShown2, setPasswordShown2] = useState(false);\n  const [user, setUser] = useState('');\n  const [validName, setValidName] = useState(false);\n  const [userFocus, setUserFocus] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [validEmail, setValidEmail] = useState(false);\n  const [emailFocus, setEmailFocus] = useState(false);\n\n  const [pwd, setPwd] = useState('');\n  const [validPwd, setValidPwd] = useState(false);\n  const [pwdFocus, setPwdFocus] = useState(false);\n\n  const [matchPwd, setMatchPwd] = useState('');\n  const [validMatch, setValidMatch] = useState(false);\n  const [matchFocus, setMatchFocus] = useState(false);\n\n  const [errMsg, setErrMsg] = useState('');\n\n  useEffect(() => {\n    userRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    setValidName(USER_REGEX.test(user));\n  }, [user]);\n\n  useEffect(() => {\n    setValidEmail(EMAIL_REGEX.test(email));\n  }, [email]);\n\n  useEffect(() => {\n    setValidPwd(PWD_REGEX.test(pwd));\n    setValidMatch(pwd === matchPwd);\n  }, [pwd, matchPwd]);\n\n  useEffect(() => {\n    setErrMsg('');\n  }, [user, pwd, matchPwd]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // if button enabled with JS hack\n    const v1 = USER_REGEX.test(user);\n    const v2 = PWD_REGEX.test(pwd);\n    const v3 = EMAIL_REGEX.test(email);\n    if (!v1 || !v2 || !v3) {\n      setErrMsg('Invalid Entry');\n      return;\n    }\n\n    dispatch(authOperations.register({ name: user, password: pwd, email }));\n    setEmail('');\n    setUser('');\n    setPwd('');\n    setMatchPwd('');\n  };\n\n  const togglePassword1 = () => {\n    setPasswordShown1(!passwordShown1);\n  };\n\n  const togglePassword2 = () => {\n    setPasswordShown2(!passwordShown2);\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <section className={styles.section}>\n        <p\n          ref={errRef}\n          className={errMsg ? `${styles.errmsg}` : `${styles.offscreen}`}\n          aria-live=\"assertive\"\n        >\n          {errMsg}\n        </p>\n        <h1>Register</h1>\n        <form onSubmit={handleSubmit} className={styles.form}>\n          <label htmlFor=\"username\">\n            Username:\n            <FaCheck\n              className={validName ? `${styles.valid}` : `${styles.hide}`}\n            />\n            <FaTimes\n              className={\n                validName || !user ? `${styles.hide}` : `${styles.invalid}`\n              }\n            />\n          </label>\n          <div className={styles.inputWrapper}>\n            <input\n              type=\"text\"\n              id=\"username\"\n              ref={userRef}\n              autoComplete=\"off\"\n              onChange={e => setUser(e.target.value)}\n              value={user}\n              required\n              aria-invalid={validName ? 'false' : 'true'}\n              aria-describedby=\"uidnote\"\n              onFocus={() => setUserFocus(true)}\n              onBlur={() => setUserFocus(false)}\n            />\n            <div className={styles.infoIcon}>\n              <FaRegUser\n                size={28}\n                style={{ top: '7px', left: '7px', position: 'absolute' }}\n              />\n            </div>\n          </div>\n          <p\n            id=\"uidnote\"\n            className={\n              userFocus && user && !validName\n                ? `${styles.instructions}`\n                : `${styles.offscreen}`\n            }\n          >\n            <FaInfoCircle />\n            4 to 24 characters.\n            <br />\n            Must begin with a letter.\n            <br />\n            Letters, numbers, underscores, hyphens allowed.\n          </p>\n\n          <label htmlFor=\"email\">\n            Email:\n            <FaCheck\n              className={validEmail ? `${styles.valid}` : `${styles.hide}`}\n            />\n            <FaTimes\n              className={\n                validEmail || !email ? `${styles.hide}` : `${styles.invalid}`\n              }\n            />\n          </label>\n          <div className={styles.inputWrapper}>\n            <input\n              type=\"email\"\n              id=\"email\"\n              ref={userRef}\n              onChange={e => setEmail(e.target.value)}\n              value={email}\n              required\n              aria-invalid={validEmail ? 'false' : 'true'}\n              aria-describedby=\"emailnote\"\n              onFocus={() => setEmailFocus(true)}\n              onBlur={() => setEmailFocus(false)}\n            />\n            <div className={styles.infoIcon}>\n              <MdOutlineAlternateEmail\n                size={30}\n                style={{ top: '5px', left: '5px', position: 'absolute' }}\n              />\n            </div>\n          </div>\n\n          <p\n            id=\"emailnote\"\n            className={\n              emailFocus && email && !validEmail\n                ? `${styles.instructions}`\n                : `${styles.offscreen}`\n            }\n          >\n            <FaInfoCircle />\n            An email is a string separated into two parts by @ symbol. a\n            \"personal_info\" and a domain, that is personal_info@domain Letters,\n            numbers, underscores, hyphens allowed.\n            <br />\n            The domain name [for example com, org, net, in, us, info] part\n            contains letters, digits, hyphens, and dots.\n          </p>\n\n          <label htmlFor=\"password\">\n            Password:\n            <FaCheck\n              className={validPwd ? `${styles.valid}` : `${styles.hide}`}\n            />\n            <FaTimes\n              className={\n                validPwd || !pwd ? `${styles.hide}` : `${styles.invalid}`\n              }\n            />\n          </label>\n          <div className={styles.inputWrapper}>\n            <input\n              type={passwordShown2 ? 'text' : 'password'}\n              id=\"password\"\n              onChange={e => setPwd(e.target.value)}\n              value={pwd}\n              required\n              aria-invalid={validPwd ? 'false' : 'true'}\n              aria-describedby=\"pwdnote\"\n              onFocus={() => setPwdFocus(true)}\n              onBlur={() => setPwdFocus(false)}\n            />\n            <OverlayTrigger\n              placement=\"top\"\n              overlay={\n                <Tooltip id=\"password button tooltip\">show password</Tooltip>\n              }\n            >\n              <button\n                className={styles.showPasswordButton}\n                onClick={togglePassword2}\n                type=\"button\"\n              >\n                <FaRegEye size={30} />\n              </button>\n            </OverlayTrigger>\n          </div>\n\n          <p\n            id=\"pwdnote\"\n            className={\n              pwdFocus && !validPwd\n                ? `${styles.instructions}`\n                : `${styles.offscreen}`\n            }\n          >\n            <FaInfoCircle />\n            8 to 24 characters.\n            <br />\n            Must include uppercase and lowercase letters, a number and a special\n            character.\n            <br />\n            Allowed special characters:{' '}\n            <span aria-label=\"exclamation mark\">!</span>{' '}\n            <span aria-label=\"at symbol\">@</span>{' '}\n            <span aria-label=\"hashtag\">#</span>{' '}\n            <span aria-label=\"dollar sign\">$</span>{' '}\n            <span aria-label=\"percent\">%</span>\n          </p>\n\n          <label htmlFor=\"confirm_pwd\">\n            Confirm Password:\n            <FaCheck\n              className={\n                validMatch && matchPwd ? `${styles.valid}` : `${styles.hide}`\n              }\n            />\n            <FaTimes\n              className={\n                validMatch || !matchPwd ? `${styles.hide}` : `${styles.invalid}`\n              }\n            />\n          </label>\n          <div className={styles.inputWrapper}>\n            <input\n              type={passwordShown1 ? 'text' : 'password'}\n              id=\"confirm_pwd\"\n              onChange={e => setMatchPwd(e.target.value)}\n              value={matchPwd}\n              required\n              aria-invalid={validMatch ? 'false' : 'true'}\n              aria-describedby=\"confirmnote\"\n              onFocus={() => setMatchFocus(true)}\n              onBlur={() => setMatchFocus(false)}\n            />\n            <OverlayTrigger\n              placement=\"top\"\n              overlay={\n                <Tooltip id=\"password button tooltip\">show password</Tooltip>\n              }\n            >\n              <button\n                className={styles.showPasswordButton}\n                onClick={togglePassword1}\n                type=\"button\"\n              >\n                <FaRegEye size={30} />\n              </button>\n            </OverlayTrigger>\n          </div>\n\n          <p\n            id=\"confirmnote\"\n            className={\n              matchFocus && !validMatch\n                ? `${styles.instructions}`\n                : `${styles.offscreen}`\n            }\n          >\n            <FaInfoCircle />\n            Must match the first password input field.\n          </p>\n\n          <button\n            type=\"submit\"\n            className={styles.submitButton}\n            disabled={!validName || !validPwd || !validMatch ? true : false}\n          >\n            Sign Up\n          </button>\n        </form>\n        <p>\n          Already registered?\n          <br />\n          <NavLink className={styles.line} to={'/LogIn'}>\n            Sign In\n          </NavLink>\n        </p>\n      </section>\n    </div>\n  );\n};\n\nexport default Register;\n"],"names":["USER_REGEX","PWD_REGEX","EMAIL_REGEX","userRef","useRef","errRef","dispatch","useDispatch","useState","passwordShown1","setPasswordShown1","passwordShown2","setPasswordShown2","user","setUser","validName","setValidName","userFocus","setUserFocus","email","setEmail","validEmail","setValidEmail","emailFocus","setEmailFocus","pwd","setPwd","validPwd","setValidPwd","pwdFocus","setPwdFocus","matchPwd","setMatchPwd","validMatch","setValidMatch","matchFocus","setMatchFocus","errMsg","setErrMsg","useEffect","current","focus","test","className","styles","ref","onSubmit","e","preventDefault","v1","v2","v3","authOperations","name","password","htmlFor","type","id","autoComplete","onChange","target","value","required","onFocus","onBlur","size","style","top","left","position","OverlayTrigger","placement","overlay","Tooltip","onClick","disabled","to"],"sourceRoot":""}